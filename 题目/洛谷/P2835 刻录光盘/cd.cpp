#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
#define il inline
#define ll long long
#define rgi register int

using namespace std;

const int oo = 0x3f3f3f3f;
const int N = 1e5 + 10;
const int M = 1e5 + 10;

int n, m, ans;
int cnt, first[N], U[N], V[N];
int tot, idx, low[N], dfn[N], belong[N], deg[N];
int top, instk[N], stk[N];

struct edge
{
	int to, _next;
} e[M << 1];

/*il int read()
{
	rgi x = 0, f = 0, ch;
	while(!isdigit(ch = getchar())) f |= ch == '-';
	while(isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();
	return f ? -x : x;
}*/

il void Add_Edge(int u, int v)
{
	e[cnt].to = v;
	e[cnt]._next = first[u];
	first[u] = cnt++;
}

void tarjan(int u)
{
	dfn[u] = low[u] = ++idx;
	instk[u] = 1, stk[++top] = u;
	for(rgi i = first[u]; ~i; i = e[i]._next)
	{
		int v = e[i].to;
		if(!dfn[v])
		{
			tarjan(v);
			low[u] = min(low[u], low[v]);
		}
		else if(instk[v])
			low[u] = min(low[u], dfn[v]);
	}
	if(dfn[u] == low[u])
	{
		tot++;
		while(stk[top] != u)
		{
			instk[stk[top]] = 0;
			belong[stk[top]] = tot;
			top--;
		}
		instk[u] = 0, belong[u] = tot, top--;
	}
}

int main()
{
	scanf("%d", &n); m = 1;
	memset(first, -1, sizeof(first));
	for(rgi i = 1; i <= n; ++i)
		while(scanf("%d", &V[m]))
		{
			U[m] = i;
			if(!V[m])	break;
			Add_Edge(V[m], U[m]);
			m++;
		}
	m--;
	for(rgi i = 1; i <= n; ++i)
		if(!dfn[i])	tarjan(i);
//	for(rgi i = 1; i <= n; ++i)
//		printf("%d : %d\n", i, belong[i]);
	for(rgi i = 1; i <= m; ++i)
		if(belong[U[i]] != belong[V[i]])
			deg[belong[V[i]]]++;
//	for(rgi i = 1; i <= tot; ++i)
//		printf("%d ", deg[i]);
	for(rgi i = 1; i <= tot; ++i)
		if(!deg[i]) ans++;
	printf("%d", ans);
	return 0;
}
/*
61
5 53 0
28 0
57 10 0
13 0
0
9 25 1 2 0
54 3 4 8 53 0
8 22 2 0
0
21 48 59 40 0
37 0
58 0
5 61 3 8 20 21 4 45 60 34 11 28 24 29 48 13 9 38 0
35 40 48 20 27 25 43 28 19 0
43 10 3 15 32 35 40 47 7 17 5 4 51 52 4 29 38 21 18 24 5 28 61 2 58 22 14 8 49 19 9 13 30 20 60 23 33 44 1 50 57 42 27 41 53 1 31 3 34 59 45 2 55 54 39 12 0
9 4 60 50 39 14 45 22 25 15 44 31 58 19 34 13 1 30 2 17 18 7 27 54 41 5 35 55 33 21 5 37 2 3 3 48 23 53 11 1 38 61 29 52 40 47 20 0
3 1 10 15 38 22 2 41 30 17 60 54 13 34 53 9 33 50 49 20 4 3 51 39 0
59 53 7 3 12 49 50 5 32 3 54 1 33 19 30 51 11 21 27 17 52 35 57 13 0
55 60 50 14 38 49 59 30 19 44 7 3 5 45 13 12 35 58 29 52 40 43 4 10 2 11 9 8 4 17 25 53 28 2 39 5 42 33 18 21 34 32  20 37 1 31 27 1 47 41 57 3 54 48 61 22 0
37 58 55 30 44 41 31 2 59 43 21 42 15 22 51 3 23 9 33 25 34 11 28 10 3 60 54 52 7 8 53 48 39 1 57 38 40 5 0
21 12 1 43 25 31 24 4 48 3 40 61 39 51 45 55 28 23 3 7  53 18 22 41 9 4 8 19 32 44 35 0
39 20 18 3 4 25 9 21 41 15 44 58 59 0
53 33 40 19 5 44 5 1 7 61 12 39 48 8 31 47 42 13 54 2 52 4 1 24 3 18 41 34 14 30 21 43 9 17 50 0
55 53 32 39 54 41 8 43 21 19 5 24 12 23 17 35 48 47 0
24 48 9 17 52 32 59 22 1 47 42 58 4 31 40 34 41 54 19 57 5 60 35 23 33 51 28 12 11 3 29 27 39 20 2 30 15 49 50 37 8 3 21 45 13 53 0
20 3 2 0
2 42 41 4 33 2 47 9 49 43  54 20 10 55 23 12 52 21 31 27 7 45 32 35 51 48 15 30 5 4 24 5 60 29 17 0
52 12 37 40 21 22 30  20 59 49 28 39 48 2 38 3 34 19 14 10 47 23 60 32 1 43 33 61 29 3 50 18 8 54 17 1 15 5 41 31 7 9 5 55 57 45 53 51 27 4 2 11 0
21 41 5 0
15 8 38 31 50 49 45 19 54 3 52 20 35 40 7 44 2 61 13 41 27 3 58 29 5 22 4 14 32 1 59 9 11 47 1 33 43 37 57 10 2 55 34 30 17 12 4 60 28  25 23 0
29 4 5 10 14 3 2 60  45 22 54 24 58 11 35 57 3 5 7 19 48 8 17 32 61 21 1 27 33 31 47 25 2 39 55 28 40 52 50 0
0
40 61 50 4 31 4 1 47 3 43 59 51 5 14 8 0
19 39 27 32 33 9 2 28 4 2 38 18 41 43 61 52 50 34 48 3  15 25 51 8 29 31 49 21 30 13 12 5 14 47 1 45 11 54 4 5 3 55 0
20 23 53 43  38 13 50 18 25 45 44 28 49 52 5 47 54 3 40 27 22 55 17 35 14 0
39 9 7 2 22  43 57 23 35 34 40 30 25 52 44 0
2 1 55 3 40 18 13 54 1 42 38 34 44 30 12 53 0
30 9 1 2 3 14 49 29 50 42 10 51 5 53 40 27 60 11 12 52 3 19 8 61 24 41 5 22 2 31 54 21 38 28 59 33 43 4 18 25 57 47 44 37 1 39 35 13 32 20 55 58 48 4 34 0
28 35 27 4 1  2 20 31 43 3 9 0
39 42 30 4 21 9 34 17 3 12 15 49 18 14 11 2 8 4 59 44 47 57 31 41 20 13 40 5 27 24 55 33 3 37 25 1 35 53 23 10 1 60 52 48 51 7 45 29 28 58 61 50 54 5 43 38 19 22 0
 43 14 37 17 29 35 58 4 45 4 1 24 41 38 55 20 47 7 28 25 40 22 0
41 58 3 48 2 45 11 23 15 53 4 33 4 32 49 57 61 0
57 44 11 43 28 59 3 48 37 50 25 33 42 51  0
2 28 11 1 32 50 0
57 7 8 15 18 12 41 35 19 42 38 37 30 23 10 27 55 40 3 3 29 14 45 25 24 17 60 50 32 33 43  13 31 34 21 47 0
24 35 27 60 9 17 22 28 3 39 3 43 59 21 37 0
11 59 17 50 1 40 54 47 38 55 19 7 24 5 13 41 42 49 33 25 12 31 29 2 52 23  4 30 43 34 48 51 32 14 20 2 18 45 22 1 60 10 27 35 3 57 8 58 3 21 28 9 39 15 0
8 24 59 41 3 0
51 49 3 8 48 37 1 7 44 41 39 31 21 20 5 30 45 9 59 17 0
11 12 40 43 1 35 52 24 55 30 29 3 57 39 31 54 48 3 58 17 10 44 28 5 2 61 45 20 49 22  37 53 51 0
7 60 48 47 14 13 5 10 4 31 55 32 1 25 58 15 2 59 18 29 61  43 24 38 34 19 50 45 3 35 23 21 2 44 4 41 5 1 37 28 33 12 22 8 40 11 39 53 27 20 30 17 9 52 42 0
22 27 1 4 51 34 3 59 54 24 5 41 61 25 10 47 40 2 42 53 58 21 12 50 15 7 32 45 44 28 33 38 3 48 55 1 20 57 9 4 43 52 13 11 39 35 37 29 2 18 8 49 23 30 60 5 19 14 0
5 1 44 49 54 14 61 20 35 10 31 45 40 19 17 0
7 47 45 24 19 1 48 12 5 58 4 35 4 51 50 0
10 45 23 8 40 47 4 30 11 28 24 3 4 33 17 18 58 60 2 41 57 52 49 55 42 25 38 29 14 5 43 22 44 32 34 19 27 35 51 3 12 0
30 21 13 25 5 54 8 59 42 1 27 12 14 3 28 41 4 39 51 48 19 18 0
54 10  45 9 53 5 51 31 20 0
43 12 19 23 2 17 11 33 49 60 1 29 22 10 18 50 52  5 61 59 48 7 54 28 42 13 34 35 40 58 4 47 0

*/
