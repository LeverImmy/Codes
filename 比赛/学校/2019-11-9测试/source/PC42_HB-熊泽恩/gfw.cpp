#include <bits/stdc++.h>
#define ll long long
#define rgi register int
#define rgl register ll
#define il inline

const int N = 2e5 + 10;

int n, tot, ans;
int a[N], num[N], pre[N], suf[N];

struct node {
	int lc, rc;
	int dat;
} t[N << 2];

il int read() {
	rgi x = 0, f = 0, ch;
	while(!isdigit(ch = getchar()))	f |= ch == '-';
	while(isdigit(ch))	x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();
	return f ? -x : x;
}

void Push(int p) {
	t[p].dat = std::max(t[p << 1].dat, t[p << 1 | 1].dat);
}

void Build(int p, int l, int r) {
	t[p].lc = l, t[p].rc = r;
	if(l == r)	return;
	int mid = l + r >> 1;
	Build(p << 1, l, mid);
	Build(p << 1 | 1, mid + 1, r);
	Push(p);
}

void Modify(int p, int x, int val) {
	if(t[p].lc == t[p].rc) {
		t[p].dat = std::max(t[p].dat, val);
		return;
	}
	int mid = t[p].lc + t[p].rc >> 1;
	if(x <= mid)
		Modify(p << 1, x, val);
	else
		Modify(p << 1 | 1, x, val);
	Push(p);
}

int Query(int p, int l, int r) {
	if(l <= t[p].lc && t[p].rc <= r)
		return t[p].dat;
	int mid = t[p].lc + t[p].rc >> 1;
	int res = 0;
	if(l <= mid)
		res = std::max(res, Query(p << 1, l, r));
	if(mid < r)
		res = std::max(res, Query(p << 1 | 1, l, r));
	return res;
}

int main() {
	freopen("gfw.in", "r", stdin);
	freopen("gfw.out", "w", stdout);
	n = read();
	for(rgi i = 1; i <= n; ++i) {
		a[i] = read();
		num[++tot] = a[i];
	}
	Build(1, 1, n);
	
	std::sort(num + 1, num + tot + 1);
	tot = std::unique(num + 1, num + tot + 1) - (num + 1);
	for(rgi i = 1; i <= n; ++i)	a[i] = std::lower_bound(num + 1, num + tot + 1, a[i]) - (num + 1);
	
	for(rgi i = 1; i <= n; ++i) {
		if(a[i] > a[i - 1])
			pre[i] = pre[i - 1] + 1;
		else
			pre[i] = 1;
	}
	for(rgi i = n; i >= 1; --i) {
		if(a[i] < a[i + 1])
			suf[i] = suf[i + 1] + 1;
		else
			suf[i] = 1;
	}
	
//	for(rgi i = n; i >= 1; --i) {
//		ans = std::max(ans, Query(1, a[i] + 1, n) + pre[i]);
//		Modify(1, a[i], suf[i]);
//	}
	
	for(rgi i = 1; i <= n; ++i) {
		ans = std::max(ans, Query(1, 1, a[i] - 1) + suf[i]);
		Modify(1, a[i], pre[i]);
	}
	
	printf("%d", ans);
	return 0;
}
/*
9
5 3 4 9 2 8 6 7 1

10
2 3 4 3 4 5 2 4 1 2

2000
12 1 8 1 1 8 1 9 2 1 8 13 12 10 5 13 1 6 6 5 13 2 5 8 3 2 2 1 10 12 4 10 2 13 10 4 9 12 1 11 2 9 10 2 7 4 1 7 9 6 13 8 9 7 2 13 8 3 1 6 4 6 2 7 6 13 10 3 12 11 13 2 8 12 3 1 2 6 10 10 11 11 6 9 4 9 8 1 12 10 6 4 5 10 10 12 9 8 1 7 5 1 10 1 1 13 2 2 5 13 13 4 10 7 1 3 2 9 3 2 7 10 5 11 6 3 9 2 11 12 10 2 12 7 3 1 8 6 4 1 5 3 6 3 11 7 5 12 4 9 1 10 6 5 10 13 10 7 3 7 5 13 10 5 8 1 5 4 6 8 6 12 12 11 4 9 4 8 8 9 6 10 6 13 3 4 12 12 10 2 5 4 3 2 8 12 2 13 2 10 9 7 10 10 6 13 7 12 10 3 7 2 12 12 1 2 4 12 13 1 2 5 4 4 8 13 4 9 1 7 7 12 2 4 8 8 3 1 6 12 4 12 13 2 13 2 5 3 3 5 5 4 11 10 10 5 10 13 2 10 7 9 8 10 12 4 4 1 5 9 2 10 10 3 13 9 5 5 13 7 9 5 12 8 1 8 12 12 10 2 9 5 10 5 1 10 9 7 13 2 2 1 11 13 5 10 10 9 1 10 2 11 1 3 5 3 10 5 2 6 7 10 12 5 3 13 2 13 6 3 3 9 5 13 11 9 12 7 5 1 3 8 1 3 10 7 6 9 1 9 3 7 5 2 13 9 3 3 11 8 5 13 5 9 2 2 5 2 11 11 2 13 5 4 5 4 11 12 12 11 7 1 6 13 2 7 10 4 10 7 13 3 7 7 1 10 10 5 11 7 4 1 9 10 5 13 13 4 13 11 3 8 1 8 7 2 3 3 8 12 12 9 4 7 4 4 3 1 10 13 9 13 13 4 9 6 5 9 9 4 8 11 11 8 7 6 12 10 11 8 8 11 5 11 4 9 3 6 9 12 7 4 11 8 8 9 1 1 6 9 7 13 9 4 10 2 12 10 11 11 4 8 8 10 7 11 5 10 5 2 8 11 6 8 7 2 3 7 2 8 5 8 9 13 1 5 1 1 3 12 13 8 8 7 5 1 6 9 10 12 11 7 11 5 1 4 6 3 11 9 12 2 6 7 3 8 12 3 10 1 3 9 9 10 2 2 13 9 10 11 7 9 4 6 13 4 9 7 8 8 5 6 9 10 13 13 6 13 3 2 2 7 10 12 4 13 13 5 10 12 2 5 7 6 10 7 11 5 2 8 2 6 13 12 4 1 12 9 13 1 12 4 7 10 2 12 11 4 3 7 2 7 13 8 1 9 3 11 3 5 7 4 10 7 2 1 9 13 11 11 2 10 1 9 6 2 9 4 5 1 12 6 7 12 3 7 7 5 6 11 11 13 1 8 8 5 10 3 4 7 13 6 5 2 3 11 4 13 3 10 13 1 5 8 12 7 1 8 13 9 7 11 10 8 7 6 1 5 8 6 13 10 13 5 11 2 4 3 4 6 2 3 8 6 11 9 1 13 3 2 10 9 1 6 5 9 11 5 13 8 13 13 6 12 4 5 1 7 10 4 1 11 8 8 5 7 3 5 7 7 8 3 5 9 11 11 4 10 5 6 6 4 5 11 2 10 3 4 3 1 9 5 11 4 12 2 10 2 8 5 10 4 8 1 12 7 12 5 3 3 12 9 8 3 8 9 12 12 13 3 12 8 7 9 13 7 12 10 8 6 1 7 10 10 7 10 3 7 3 8 11 1 5 5 5 12 1 5 11 2 7 9 11 2 5 11 9 5 9 5 13 11 11 9 8 7 7 12 2 12 8 13 1 12 6 8 11 8 12 8 9 8 3 7 11 9 6 6 3 1 13 2 11 12 12 7 7 5 6 9 5 2 10 8 1 2 2 11 10 2 7 7 11 9 2 9 7 7 3 9 7 4 10 7 3 10 13 9 1 7 4 8 9 13 4 9 4 5 8 13 8 1 6 6 11 10 1 6 3 5 3 12 9 1 5 11 10 4 8 13 13 12 7 8 13 10 5 3 3 12 4 12 12 12 4 11 8 6 4 10 11 6 8 6 7 1 5 3 7 12 2 6 12 10 13 1 8 6 5 10 4 9 9 4 7 1 1 1 7 6 12 6 12 9 13 7 9 4 9 2 4 13 9 5 9 10 5 4 2 9 2 5 4 12 10 12 13 13 1 8 5 13 13 3 10 12 9 5 4 7 9 9 6 6 13 3 3 4 6 4 2 10 11 7 8 7 6 9 6 6 3 11 7 4 2 3 2 13 10 7 6 7 3 13 12 4 2 1 10 10 5 11 6 4 4 13 10 11 9 5 4 13 4 12 4 7 2 7 6 13 1 13 6 5 12 4 8 3 7 4 1 11 3 6 3 7 7 1 4 4 5 9 4 10 10 7 4 13 13 9 12 13 11 6 6 11 9 1 13 2 6 13 1 9 7 3 4 1 6 9 4 10 7 7 7 3 2 12 2 2 9 2 3 6 7 9 4 4 11 5 6 3 5 8 11 13 13 3 13 5 12 6 3 5 1 11 7 3 9 10 4 5 11 6 10 6 3 13 9 13 7 3 5 11 11 2 12 12 7 1 3 5 6 5 9 8 3 4 10 13 13 2 4 12 10 3 4 12 4 1 1 10 4 5 9 3 6 8 1 1 8 5 5 2 11 13 9 2 5 8 2 4 9 7 4 5 9 9 4 2 10 4 11 2 10 7 6 4 3 8 5 10 1 9 13 11 11 10 13 2 4 3 8 13 11 11 6 9 9 9 10 7 1 7 10 10 2 2 1 4 11 7 2 11 2 1 8 12 13 9 3 3 13 10 4 11 9 10 6 4 7 4 10 8 10 8 6 1 9 8 4 6 1 6 5 5 8 13 5 9 10 7 12 12 3 2 9 1 11 3 4 5 6 3 1 4 10 8 4 8 5 10 2 7 4 7 11 11 8 5 9 6 11 7 4 3 10 1 3 8 3 8 1 10 12 3 3 11 10 6 7 3 2 8 10 5 3 9 5 10 2 13 3 13 8 6 4 4 7 8 13 11 2 2 10 3 4 12 2 3 4 8 5 8 4 3 1 7 1 7 5 2 8 7 3 2 2 6 8 10 13 9 9 4 13 5 8 3 3 9 7 9 5 1 5 8 5 5 3 5 1 8 9 8 1 13 12 4 8 6 13 9 3 9 12 2 2 8 7 5 5 13 2 9 13 6 6 5 12 8 11 12 2 8 7 5 8 7 8 4 12 10 12 3 7 11 5 8 7 11 1 12 12 4 7 1 11 1 7 10 9 6 10 10 1 5 3 10 11 13 13 11 9 11 1 4 10 7 13 4 6 1 4 4 6 12 4 4 13 12 13 8 5 11 6 7 3 9 3 13 8 4 11 5 3 13 8 13 6 7 5 11 9 8 1 2 8 7 5 7 5 6 3 11 5 9 4 7 6 6 9 2 11 8 8 1 7 2 2 12 10 6 9 8 2 11 9 9 6 2 5 11 9 7 10 13 4 1 9 9 8 4 12 6 11 6 6 6 9 7 4 6 1 1 13 4 11 10 1 4 13 5 3 8 1 1 9 4 1 6 2 9 9 13 3 8 8 8 2 3 3 5 10 5 5 9 8 5 7 8 10 6 2 1 2 2 1 13 5 4 5 6 12 3 8 1 12 2 10 1 4 1 7 1 5 1 11 1 5 7 10 3 12 11 5 3 12 7 4 6 10 10 13 10 12 7 12 13 8 10 13 1 10 6 3 3 6 13 3 12 8 13 3 9 12 7 11 11 3 3 5 12 12 4 11 11 13 9 10 9 6 11 9 4 5 13 7 13 13 11 11 9 10 3 4 9 11 1 8 13 3 1 1 2 4 11 1 3 8 12 12 2 11 9 8 2 9 1 1 10 13 1 5 10 3 9 7 13 11 3 2 3 3 2 6 8 1 6 11 10 6 11 12 3 8 8 4 3 8 5 1 7 5 6 5 9 1 13 8 13 4 9 2 8 12 7 3 1 1 2 11 6 12 11 8 6 5 1 11 1 7 11 9 13 3 1 8 5 2 4 5 8 2 8 2 13 2 4 1 4 5 13 10 5 10 6 11 1 6 8 3 1 7 11 13 10 13 7 3 2 11 9 9 12 4 10 13 7 3 2 10 7 1 8 12 12 1 11 1 8 7 3 9 13 1 8 11 13 4 1 3 3 11 13 3 1 12 2 9 1 6 6 9 6 13 9 7 2 6 7 10 1 10 7 1 12 1 11 13 6 13 3 8 13 2 10 13 2 12 11 2 6 5 13 13 6 8 6 8 3 13 6 3 11 12 3 9 1 3 8 7 4 12 1 3 3 11 5 4 11 4 8 3 8 7 4 13 3 10 7 5 9 1 8 8 12 12 3 2 3 12 8 9 13 10 11 2 9 4 5

*/
